package tests

import (
	"fmt"
	"github.com/google/go-tpm-tools/internal"
	"io/ioutil"
	"testing"

	"github.com/google/go-tpm-tools/gotpm/cmd"
	"github.com/google/go-tpm-tools/tpm2tools"
)

func TestRandom(t *testing.T) {
	rwc := internal.GetTPM(t)
	defer tpm2tools.CheckedClose(t, rwc)
	cmd.ExternalTPM = rwc

	tests := []struct {
		name string
		size uint16
	}{
		{"size=0", 0},
		{"size=1", 1},
		{"size=32", 32},
		{"size=64", 64},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {

			tmp := makeTempFile(t, nil)
			randomCMDArgs := []string{"random", "--size", fmt.Sprint(test.size), "--output", tmp}

			cmd.RootCmd.SetArgs(randomCMDArgs)
			if err := cmd.RootCmd.Execute(); err != nil {
				t.Error(err)
			}

			out, err := ioutil.ReadFile(tmp)
			if err != nil {
				t.Fatal(err)
			}

			// The max bytes generated by the TPM simulator (which is used by this test) is 48
			expectedLength := test.size
			if expectedLength > 48 {
				expectedLength = 48
			}

			if int(expectedLength) != len(out) {
				t.Errorf("Input: Expected %d, got %d", expectedLength, out)
			}
		})
	}
}
